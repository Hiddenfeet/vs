import { ChainId, Token } from 'vvs-sdk'
import { getAddress } from '@ethersproject/address'
import { getFetchedTokenList } from './fetchedTokenList'

const { MAINNET, TESTNET } = ChainId

export type TokenList = Record<string, Token>

export const mainnetTokens = {
  workbench: new Token(
    MAINNET,
    process.env.REACT_APP_WORKBENCH_ADDRESS_MAINNET || '0x6a2d178585806De5A2e5E7F9acFCE44680637284',
    18,
    'WORKBENCH',
    'WORKBENCH',
    'https://vvs.finance/',
  ),
  cro: new Token(MAINNET, '0x5C7F8A570d578ED84E63fdFA7b1eE72dEae1AE23', 18, 'CRO', 'CRO Token', 'https://crypto.org/'),
  wcro: new Token(
    MAINNET,
    '0x5C7F8A570d578ED84E63fdFA7b1eE72dEae1AE23',
    18,
    'WCRO',
    'Wrapped CRO',
    'https://crypto.org/',
  ),
  vvs: new Token(MAINNET, '0x2D03bECE6747ADC00E1a131BBA1469C15fD11e03', 18, 'VVS', 'VVS', 'https://vvs.finance/'),
  eth: new Token(
    MAINNET,
    '0xe44Fd7fCb2b1581822D0c862B68222998a0c299a',
    18,
    'ETH',
    'Wrapped Ether',
    'https://ethereum.org/en/',
  ),
  weth: new Token(
    MAINNET,
    '0xe44Fd7fCb2b1581822D0c862B68222998a0c299a',
    18,
    'WETH',
    'Wrapped Ether',
    'https://ethereum.org/en/',
  ),
  usdc: new Token(
    MAINNET,
    '0xc21223249CA28397B4B6541dfFaEcC539BfF0c59',
    6,
    'USDC',
    'USD Coin',
    'https://www.circle.com/en/usdc',
  ),
  xvvs: new Token(MAINNET, '0x7fE4DB9063b7Dd7ba55313B9c258070bEd2C143A', 18, 'xVVS', 'xvvs', 'https://vvs.finance/'),
  xargo: new Token(
    MAINNET,
    '0xb966B5D6A0fCd5b373B180Bbe072BBFbbEe10552',
    18,
    'xARGO',
    'xARGO',
    'https://www.argofinance.money/',
  ),
  stardust: new Token(
    MAINNET,
    '0x1eBFD0d52Aa04350f512aBcFd45ffb0bb86F0cc2',
    18,
    'STARDUST',
    'STARDUST',
    'https://www.argofinance.money/',
  ),
}
// TODO: remove tokens when tokenList API works
export const testnetTokens = {
  workbench: new Token(
    TESTNET,
    process.env.REACT_APP_WORKBENCH_ADDRESS_TESTNET || '0x2996B1677460e6Fd2b76B4B42E341CA5861a0018',
    18,
    'WORKBENCH',
    'WORKBENCH',
    'https://vvs.finance/',
  ),
  cro: new Token(TESTNET, '0x6a3173618859C7cd40fAF6921b5E9eB6A76f1fD4', 18, 'CRO', 'CRO', 'https://crypto.org/'),
  wcro: new Token(
    TESTNET,
    '0x6a3173618859C7cd40fAF6921b5E9eB6A76f1fD4',
    18,
    'WCRO',
    'Wrapped CRO',
    'https://crypto.org/',
  ),
  bcro: new Token(
    TESTNET,
    '0xC9642920Ec99f45ee38e06Bb2F37E3b455d122Dd',
    18,
    'bCRO',
    'bCRO',
    'https://www.argofinance.money/',
  ),
  vvs: new Token(TESTNET, '0x904Bd5a5AAC0B9d88A0D47864724218986Ad4a3a', 18, 'VVS', 'VVS', 'https://vvs.finance/'),
  eth: new Token(
    TESTNET,
    '0x441d72d584b16105FF1C68DC8bc4517F4DC13E55',
    18,
    'ETH',
    'Wrapped Ether',
    'https://ethereum.org/en/',
  ),
  weth: new Token(
    TESTNET,
    '0x441d72d584b16105FF1C68DC8bc4517F4DC13E55',
    18,
    'WETH',
    'Wrapped Ether',
    'https://ethereum.org/en/',
  ),
  usdc: new Token(
    TESTNET,
    '0x321106E51b78E0E9CEBcFeC63C5250F0F3CcB82b',
    6,
    'USDC',
    'USD Coin',
    'https://www.circle.com/en/usdc',
  ),
  wbtc: new Token(
    TESTNET,
    '0xFFc8ce84a196420d7bCCDEe980c65364eD1f389F',
    18,
    'WBTC',
    'Wrapped BTC',
    'https://bitcoin.org/en/',
  ),
  usdt: new Token(TESTNET, '0x914a8825B29a04ae687625eCDa20B67abd0B58b1', 6, 'USDT', 'Tether USD', 'https://tether.to/'),
  shib: new Token(
    TESTNET,
    '0xF6dF880DF3571ab39a3E09a74D8DB00107e9A43E',
    18,
    'SHIB',
    'Shiba Inu',
    'https://shibatoken.com/',
  ),
  coffee: new Token(
    TESTNET,
    '0x2DA12B663DAAbB01319c75F4ACC121618bA7785C',
    18,
    'COFFEE',
    'Coffee',
    'https://vvs.finance/',
  ),
  fish_ball: new Token(
    TESTNET,
    '0xc7cB072748dd938c1014c4253Ba72a806c35B363',
    18,
    'FISH_BALL',
    'Fish Ball',
    'https://vvs.finance/',
  ),
  rich_man: new Token(
    TESTNET,
    '0xBA9753472180A44bdB6045a2DAbBb2f63f7B7E95',
    18,
    'RICH_MAN',
    'Rich Man',
    'https://vvs.finance/',
  ),
  poor_man: new Token(
    TESTNET,
    '0xf21D12f075ee0FCC6931d660EbD5a65abd9a354B',
    18,
    'POOR_MAN',
    'Pool Man',
    'https://vvs.finance/',
  ),
  banana: new Token(
    TESTNET,
    '0x75a98c7ED2D451557D6E22F7f75958DA43E0F143',
    18,
    'BANANA',
    'Banana',
    'https://vvs.finance/',
  ),
  orange: new Token(
    TESTNET,
    '0xB7189FAaaa0Cd9a6D006A454b527A54f97e3F5d8',
    18,
    'ORANGE',
    'Orange',
    'https://vvs.finance/',
  ),
  salad: new Token(TESTNET, '0x755979387ecDF3d26145C2E9d0BBC9c008409c35', 18, 'SALAD', 'Salad', 'https://vvs.finance/'),
  hamburger: new Token(
    TESTNET,
    '0x35f38e0eAb6A9d4EE28956665b20B133955887b6',
    18,
    'HAMBURGER',
    'Hamburger',
    'https://vvs.finance/',
  ),
  pizza: new Token(TESTNET, '0x5da960c75BD0FeC0eEaf3dc13f92279161b694F4', 18, 'PIZZA', 'Pizza', 'https://vvs.finance/'),
  muffin: new Token(
    TESTNET,
    '0xeCEd065C7AeAA2daff3199ead1544511b2612022',
    18,
    'MUFFIN',
    'Muffin',
    'https://vvs.finance/',
  ),
  ginger: new Token(
    TESTNET,
    '0x67Bc49E7392d5467d758A4fcCA2b0246a4218F25',
    18,
    'GINGER',
    'Ginger',
    'https://vvs.finance/',
  ),
  seattle: new Token(
    TESTNET,
    '0x44B23563FCe03deeaA4e19270Fdb645a8017F260',
    18,
    'SEATTLE',
    'Seattle',
    'https://vvs.finance/',
  ),
  single: new Token(
    TESTNET,
    '0x0804702a4E749d39A35FDe73d1DF0B1f1D6b8347',
    18,
    'SINGLE',
    'SINGLE Token',
    'https://singlefinance.io/',
  ),
  start: new Token(TESTNET, '0x3cB52C062BcBDAa2E88Fbc7A21ACa7765FaA4c4c', 18, 'START', 'start', 'https://vvs.finance/'),
  start1: new Token(
    TESTNET,
    '0xC8a9c47fcC89B567784C4fCB017d266C65A6EafF',
    18,
    'START1',
    'start1',
    'https://vvs.finance/',
  ),
  start2: new Token(
    TESTNET,
    '0x02a73fC5BDC5Cf58Bd71a49880157433dfE7574E',
    6,
    'START2',
    'start2',
    'https://vvs.finance/',
  ),
  rose: new Token(TESTNET, '0x7eBDdF6c91E19283a3Ad708754ABAd7A6ad0E657', 18, 'ROSE', 'rose', 'https://vvs.finance/'),
  rose1: new Token(TESTNET, '0x401d0c4E76A0566F174321c2e85a618CA718E112', 18, 'ROSE1', 'rose1', 'https://vvs.finance/'),
  rose2: new Token(TESTNET, '0xcCAca9E0741045A56900a384107Da93D27df6c3D', 18, 'ROSE2', 'rose2', 'https://vvs.finance/'),
  xvvs: new Token(TESTNET, '0x99cEEF14F0Db80E6f691AF925cE1b3759cB54ecC', 18, 'xVVS', 'xvvs', 'https://vvs.finance/'),
  versa: new Token(
    TESTNET,
    '0x29F7Dec75943DC4144A90Ca70aeaB3651918D423',
    18,
    'VERSA',
    'versa',
    'https://versagames.io/',
  ),
  argo: new Token(
    TESTNET,
    '0xC3C63A9b6Dc4945cf3B35C79EE4058d3A220E22B',
    18,
    'ARGO',
    'ARGO',
    'https://www.argofinance.money/',
  ),
  xrose1: new Token(
    TESTNET,
    '0xB37A3BF0C93118B52E101a5448a0b1169f32BC20',
    18,
    'xROSE1',
    'xROSE1',
    'https://www.argofinance.money/',
  ),
  devArgo: new Token(
    TESTNET,
    '0x905131F638B4c7E2A677582A842397077F09F297',
    18,
    'devArgo',
    'devArgo',
    'https://www.argofinance.money/',
  ),
  fer: new Token(
    TESTNET,
    '0x34881f69dfE2A43E1D315455AC47B6aeAb44DBF9',
    18,
    'FER',
    'Ferro',
    'https://ferroprotocol.com/',
  ),
  devMtd: new Token(
    TESTNET,
    '0x4003E0885e486Eb12823db489deBc949888a0C8F',
    18,
    'devMTD',
    'devMTD',
    'https://www.cronoslabs.org/',
  ),
  mtd: new Token(
    TESTNET,
    '0x84C4F9aD9a0fD56fD3F95EF41D0bcd8DB7C86Be9',
    18,
    'stgMTD',
    'stgMTD',
    'https://www.cronoslabs.org/',
  ),
  lion: new Token(
    TESTNET,
    '0x2527ac08e953C666b3Ed3989aC71744D58788695',
    18,
    'LION',
    'LION',
    'https://www.cronoslabs.org/',
  ),
  croid: new Token(
    TESTNET,
    '0x101BcA936C0AfB0a51786d65b0B130826Cf40257',
    18,
    'CROID',
    'CROID',
    'https://www.cronoslabs.org/',
  ),
  gmx: new Token(
    TESTNET,
    '0x8e703348d7a536e334e4b5375d79deD7b7Ec706e',
    18,
    'GMX',
    'GMX',
    'https://www.cronoslabs.org/',
  ),
  vno: new Token(TESTNET, '0x5024739e1dB8d7d1D1D7D3CA06DAAE786c2F27f6', 18, 'VNO', 'VNO', 'https://veno.finance/'),
  ful: new Token(
    TESTNET,
    '0x2e755Bf30938B64281900d2219C3842d509e9D92',
    18,
    'FUL',
    'Fulcrom',
    'https://fulcrom.finance/',
  ),
  atom: new Token(TESTNET, '0xd9cEEB61010e3a16D8bc1A1Ea1b9960a58C1bF59', 6, 'ATOM', 'ATOM', 'http://cosmos.network/'),
  lcro: new Token(
    TESTNET,
    '0xa5bdfA7874EB20824C4F95350c8D4C71ba054da7',
    18,
    'LCRO',
    'Liquid CRO',
    'https://veno.finance/',
  ),
}


export const getTokens = (chainId: string): TokenList => {
  let tempConfigTokenList = chainId === MAINNET.toString() ? { ...mainnetTokens } : { ...testnetTokens }
  const fetchedTokenList = getFetchedTokenList()

  fetchedTokenList.forEach(({ address, decimal, symbol, name, link }) => {
    tempConfigTokenList = {
      ...tempConfigTokenList,
      [symbol.toLowerCase()]: new Token(
        chainId === MAINNET.toString() ? MAINNET : TESTNET,
        getAddress(address),
        decimal,
        symbol,
        name,
        link,
      ),
    }
  })

  return tempConfigTokenList
}
